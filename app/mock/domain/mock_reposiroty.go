// Code generated by MockGen. DO NOT EDIT.
// Source: reposiroty.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	domain "github.com/g-chicken/mah-jong/app/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockPlayerRepository is a mock of PlayerRepository interface.
type MockPlayerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerRepositoryMockRecorder
}

// MockPlayerRepositoryMockRecorder is the mock recorder for MockPlayerRepository.
type MockPlayerRepositoryMockRecorder struct {
	mock *MockPlayerRepository
}

// NewMockPlayerRepository creates a new mock instance.
func NewMockPlayerRepository(ctrl *gomock.Controller) *MockPlayerRepository {
	mock := &MockPlayerRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerRepository) EXPECT() *MockPlayerRepositoryMockRecorder {
	return m.recorder
}

// CreatePlayer mocks base method.
func (m *MockPlayerRepository) CreatePlayer(c context.Context, name string) (*domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayer", c, name)
	ret0, _ := ret[0].(*domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlayer indicates an expected call of CreatePlayer.
func (mr *MockPlayerRepositoryMockRecorder) CreatePlayer(c, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayer", reflect.TypeOf((*MockPlayerRepository)(nil).CreatePlayer), c, name)
}

// GetPlayerByID mocks base method.
func (m *MockPlayerRepository) GetPlayerByID(c context.Context, id uint64) (*domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerByID", c, id)
	ret0, _ := ret[0].(*domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerByID indicates an expected call of GetPlayerByID.
func (mr *MockPlayerRepositoryMockRecorder) GetPlayerByID(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerByID", reflect.TypeOf((*MockPlayerRepository)(nil).GetPlayerByID), c, id)
}

// GetPlayerByName mocks base method.
func (m *MockPlayerRepository) GetPlayerByName(c context.Context, name string) (*domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerByName", c, name)
	ret0, _ := ret[0].(*domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerByName indicates an expected call of GetPlayerByName.
func (mr *MockPlayerRepositoryMockRecorder) GetPlayerByName(c, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerByName", reflect.TypeOf((*MockPlayerRepository)(nil).GetPlayerByName), c, name)
}

// GetPlayers mocks base method.
func (m *MockPlayerRepository) GetPlayers(c context.Context) ([]*domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayers", c)
	ret0, _ := ret[0].([]*domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayers indicates an expected call of GetPlayers.
func (mr *MockPlayerRepositoryMockRecorder) GetPlayers(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayers", reflect.TypeOf((*MockPlayerRepository)(nil).GetPlayers), c)
}

// MockHalfRoundGameRepository is a mock of HalfRoundGameRepository interface.
type MockHalfRoundGameRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHalfRoundGameRepositoryMockRecorder
}

// MockHalfRoundGameRepositoryMockRecorder is the mock recorder for MockHalfRoundGameRepository.
type MockHalfRoundGameRepositoryMockRecorder struct {
	mock *MockHalfRoundGameRepository
}

// NewMockHalfRoundGameRepository creates a new mock instance.
func NewMockHalfRoundGameRepository(ctrl *gomock.Controller) *MockHalfRoundGameRepository {
	mock := &MockHalfRoundGameRepository{ctrl: ctrl}
	mock.recorder = &MockHalfRoundGameRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHalfRoundGameRepository) EXPECT() *MockHalfRoundGameRepositoryMockRecorder {
	return m.recorder
}

// CreateHalfRoundGames mocks base method.
func (m *MockHalfRoundGameRepository) CreateHalfRoundGames(c context.Context, handID uint64, halfRoundGameScores domain.HalfRoundGameScores) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHalfRoundGames", c, handID, halfRoundGameScores)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHalfRoundGames indicates an expected call of CreateHalfRoundGames.
func (mr *MockHalfRoundGameRepositoryMockRecorder) CreateHalfRoundGames(c, handID, halfRoundGameScores interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHalfRoundGames", reflect.TypeOf((*MockHalfRoundGameRepository)(nil).CreateHalfRoundGames), c, handID, halfRoundGameScores)
}

// GetHalfRoundGameScoresByHandID mocks base method.
func (m *MockHalfRoundGameRepository) GetHalfRoundGameScoresByHandID(c context.Context, handID uint64) (domain.HalfRoundGameScores, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHalfRoundGameScoresByHandID", c, handID)
	ret0, _ := ret[0].(domain.HalfRoundGameScores)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHalfRoundGameScoresByHandID indicates an expected call of GetHalfRoundGameScoresByHandID.
func (mr *MockHalfRoundGameRepositoryMockRecorder) GetHalfRoundGameScoresByHandID(c, handID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHalfRoundGameScoresByHandID", reflect.TypeOf((*MockHalfRoundGameRepository)(nil).GetHalfRoundGameScoresByHandID), c, handID)
}

// MockHandRepository is a mock of HandRepository interface.
type MockHandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHandRepositoryMockRecorder
}

// MockHandRepositoryMockRecorder is the mock recorder for MockHandRepository.
type MockHandRepositoryMockRecorder struct {
	mock *MockHandRepository
}

// NewMockHandRepository creates a new mock instance.
func NewMockHandRepository(ctrl *gomock.Controller) *MockHandRepository {
	mock := &MockHandRepository{ctrl: ctrl}
	mock.recorder = &MockHandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandRepository) EXPECT() *MockHandRepositoryMockRecorder {
	return m.recorder
}

// CreateHand mocks base method.
func (m *MockHandRepository) CreateHand(c context.Context, timestamp time.Time) (*domain.Hand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHand", c, timestamp)
	ret0, _ := ret[0].(*domain.Hand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHand indicates an expected call of CreateHand.
func (mr *MockHandRepositoryMockRecorder) CreateHand(c, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHand", reflect.TypeOf((*MockHandRepository)(nil).CreateHand), c, timestamp)
}

// GetHandByID mocks base method.
func (m *MockHandRepository) GetHandByID(c context.Context, id uint64) (*domain.Hand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHandByID", c, id)
	ret0, _ := ret[0].(*domain.Hand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHandByID indicates an expected call of GetHandByID.
func (mr *MockHandRepositoryMockRecorder) GetHandByID(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHandByID", reflect.TypeOf((*MockHandRepository)(nil).GetHandByID), c, id)
}

// GetHands mocks base method.
func (m *MockHandRepository) GetHands(c context.Context) ([]*domain.Hand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHands", c)
	ret0, _ := ret[0].([]*domain.Hand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHands indicates an expected call of GetHands.
func (mr *MockHandRepositoryMockRecorder) GetHands(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHands", reflect.TypeOf((*MockHandRepository)(nil).GetHands), c)
}

// MockPlayerHandRepository is a mock of PlayerHandRepository interface.
type MockPlayerHandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerHandRepositoryMockRecorder
}

// MockPlayerHandRepositoryMockRecorder is the mock recorder for MockPlayerHandRepository.
type MockPlayerHandRepositoryMockRecorder struct {
	mock *MockPlayerHandRepository
}

// NewMockPlayerHandRepository creates a new mock instance.
func NewMockPlayerHandRepository(ctrl *gomock.Controller) *MockPlayerHandRepository {
	mock := &MockPlayerHandRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerHandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerHandRepository) EXPECT() *MockPlayerHandRepositoryMockRecorder {
	return m.recorder
}

// CreatePlayerHandPairs mocks base method.
func (m *MockPlayerHandRepository) CreatePlayerHandPairs(c context.Context, args []*domain.CreatePlayerHandArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayerHandPairs", c, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlayerHandPairs indicates an expected call of CreatePlayerHandPairs.
func (mr *MockPlayerHandRepositoryMockRecorder) CreatePlayerHandPairs(c, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayerHandPairs", reflect.TypeOf((*MockPlayerHandRepository)(nil).CreatePlayerHandPairs), c, args)
}

// ParticipatePlayersInHand mocks base method.
func (m *MockPlayerHandRepository) ParticipatePlayersInHand(c context.Context, handID uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipatePlayersInHand", c, handID)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParticipatePlayersInHand indicates an expected call of ParticipatePlayersInHand.
func (mr *MockPlayerHandRepositoryMockRecorder) ParticipatePlayersInHand(c, handID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipatePlayersInHand", reflect.TypeOf((*MockPlayerHandRepository)(nil).ParticipatePlayersInHand), c, handID)
}

// MockRDBStatementSetRepository is a mock of RDBStatementSetRepository interface.
type MockRDBStatementSetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRDBStatementSetRepositoryMockRecorder
}

// MockRDBStatementSetRepositoryMockRecorder is the mock recorder for MockRDBStatementSetRepository.
type MockRDBStatementSetRepositoryMockRecorder struct {
	mock *MockRDBStatementSetRepository
}

// NewMockRDBStatementSetRepository creates a new mock instance.
func NewMockRDBStatementSetRepository(ctrl *gomock.Controller) *MockRDBStatementSetRepository {
	mock := &MockRDBStatementSetRepository{ctrl: ctrl}
	mock.recorder = &MockRDBStatementSetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRDBStatementSetRepository) EXPECT() *MockRDBStatementSetRepositoryMockRecorder {
	return m.recorder
}

// Transaction mocks base method.
func (m *MockRDBStatementSetRepository) Transaction(c context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", c, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockRDBStatementSetRepositoryMockRecorder) Transaction(c, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockRDBStatementSetRepository)(nil).Transaction), c, f)
}

// MockRDBDetectorRepository is a mock of RDBDetectorRepository interface.
type MockRDBDetectorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRDBDetectorRepositoryMockRecorder
}

// MockRDBDetectorRepositoryMockRecorder is the mock recorder for MockRDBDetectorRepository.
type MockRDBDetectorRepositoryMockRecorder struct {
	mock *MockRDBDetectorRepository
}

// NewMockRDBDetectorRepository creates a new mock instance.
func NewMockRDBDetectorRepository(ctrl *gomock.Controller) *MockRDBDetectorRepository {
	mock := &MockRDBDetectorRepository{ctrl: ctrl}
	mock.recorder = &MockRDBDetectorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRDBDetectorRepository) EXPECT() *MockRDBDetectorRepositoryMockRecorder {
	return m.recorder
}

// GetRDBOperator mocks base method.
func (m *MockRDBDetectorRepository) GetRDBOperator(c context.Context) domain.RDBOperator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRDBOperator", c)
	ret0, _ := ret[0].(domain.RDBOperator)
	return ret0
}

// GetRDBOperator indicates an expected call of GetRDBOperator.
func (mr *MockRDBDetectorRepositoryMockRecorder) GetRDBOperator(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRDBOperator", reflect.TypeOf((*MockRDBDetectorRepository)(nil).GetRDBOperator), c)
}

// MockRDBOperator is a mock of RDBOperator interface.
type MockRDBOperator struct {
	ctrl     *gomock.Controller
	recorder *MockRDBOperatorMockRecorder
}

// MockRDBOperatorMockRecorder is the mock recorder for MockRDBOperator.
type MockRDBOperatorMockRecorder struct {
	mock *MockRDBOperator
}

// NewMockRDBOperator creates a new mock instance.
func NewMockRDBOperator(ctrl *gomock.Controller) *MockRDBOperator {
	mock := &MockRDBOperator{ctrl: ctrl}
	mock.recorder = &MockRDBOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRDBOperator) EXPECT() *MockRDBOperatorMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockRDBOperator) Exec(c context.Context, query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{c, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockRDBOperatorMockRecorder) Exec(c, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{c, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockRDBOperator)(nil).Exec), varargs...)
}

// Get mocks base method.
func (m *MockRDBOperator) Get(c context.Context, query string, args []interface{}, dist ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{c, query, args}
	for _, a := range dist {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRDBOperatorMockRecorder) Get(c, query, args interface{}, dist ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{c, query, args}, dist...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRDBOperator)(nil).Get), varargs...)
}

// Select mocks base method.
func (m *MockRDBOperator) Select(c context.Context, query string, args []interface{}, scanFunc func(*sql.Rows) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", c, query, args, scanFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockRDBOperatorMockRecorder) Select(c, query, args, scanFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockRDBOperator)(nil).Select), c, query, args, scanFunc)
}

// MockConfigRepository is a mock of ConfigRepository interface.
type MockConfigRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConfigRepositoryMockRecorder
}

// MockConfigRepositoryMockRecorder is the mock recorder for MockConfigRepository.
type MockConfigRepositoryMockRecorder struct {
	mock *MockConfigRepository
}

// NewMockConfigRepository creates a new mock instance.
func NewMockConfigRepository(ctrl *gomock.Controller) *MockConfigRepository {
	mock := &MockConfigRepository{ctrl: ctrl}
	mock.recorder = &MockConfigRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigRepository) EXPECT() *MockConfigRepositoryMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigRepository) GetConfig(c context.Context) (*domain.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", c)
	ret0, _ := ret[0].(*domain.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigRepositoryMockRecorder) GetConfig(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigRepository)(nil).GetConfig), c)
}
