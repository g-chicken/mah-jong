// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/g-chicken/mah-jong/app/domain"
	usecase "github.com/g-chicken/mah-jong/app/usecase"
	gomock "github.com/golang/mock/gomock"
)

// MockConfigUsecase is a mock of ConfigUsecase interface.
type MockConfigUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockConfigUsecaseMockRecorder
}

// MockConfigUsecaseMockRecorder is the mock recorder for MockConfigUsecase.
type MockConfigUsecaseMockRecorder struct {
	mock *MockConfigUsecase
}

// NewMockConfigUsecase creates a new mock instance.
func NewMockConfigUsecase(ctrl *gomock.Controller) *MockConfigUsecase {
	mock := &MockConfigUsecase{ctrl: ctrl}
	mock.recorder = &MockConfigUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigUsecase) EXPECT() *MockConfigUsecaseMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigUsecase) GetConfig(c context.Context) (*domain.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", c)
	ret0, _ := ret[0].(*domain.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigUsecaseMockRecorder) GetConfig(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigUsecase)(nil).GetConfig), c)
}

// MockPlayerUsecase is a mock of PlayerUsecase interface.
type MockPlayerUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerUsecaseMockRecorder
}

// MockPlayerUsecaseMockRecorder is the mock recorder for MockPlayerUsecase.
type MockPlayerUsecaseMockRecorder struct {
	mock *MockPlayerUsecase
}

// NewMockPlayerUsecase creates a new mock instance.
func NewMockPlayerUsecase(ctrl *gomock.Controller) *MockPlayerUsecase {
	mock := &MockPlayerUsecase{ctrl: ctrl}
	mock.recorder = &MockPlayerUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerUsecase) EXPECT() *MockPlayerUsecaseMockRecorder {
	return m.recorder
}

// CreatePlayer mocks base method.
func (m *MockPlayerUsecase) CreatePlayer(c context.Context, name string) (*domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayer", c, name)
	ret0, _ := ret[0].(*domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlayer indicates an expected call of CreatePlayer.
func (mr *MockPlayerUsecaseMockRecorder) CreatePlayer(c, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayer", reflect.TypeOf((*MockPlayerUsecase)(nil).CreatePlayer), c, name)
}

// FetchPlayers mocks base method.
func (m *MockPlayerUsecase) FetchPlayers(c context.Context) ([]*domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPlayers", c)
	ret0, _ := ret[0].([]*domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPlayers indicates an expected call of FetchPlayers.
func (mr *MockPlayerUsecaseMockRecorder) FetchPlayers(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPlayers", reflect.TypeOf((*MockPlayerUsecase)(nil).FetchPlayers), c)
}

// MockHandUsecase is a mock of HandUsecase interface.
type MockHandUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockHandUsecaseMockRecorder
}

// MockHandUsecaseMockRecorder is the mock recorder for MockHandUsecase.
type MockHandUsecaseMockRecorder struct {
	mock *MockHandUsecase
}

// NewMockHandUsecase creates a new mock instance.
func NewMockHandUsecase(ctrl *gomock.Controller) *MockHandUsecase {
	mock := &MockHandUsecase{ctrl: ctrl}
	mock.recorder = &MockHandUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandUsecase) EXPECT() *MockHandUsecaseMockRecorder {
	return m.recorder
}

// CreateHand mocks base method.
func (m *MockHandUsecase) CreateHand(c context.Context, args *usecase.CreateHandArguments) (*domain.Hand, []uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHand", c, args)
	ret0, _ := ret[0].(*domain.Hand)
	ret1, _ := ret[1].([]uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateHand indicates an expected call of CreateHand.
func (mr *MockHandUsecaseMockRecorder) CreateHand(c, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHand", reflect.TypeOf((*MockHandUsecase)(nil).CreateHand), c, args)
}

// FetchHandScore mocks base method.
func (m *MockHandUsecase) FetchHandScore(c context.Context, handID uint64) (*domain.Hand, []uint64, domain.HalfRoundGameScores, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHandScore", c, handID)
	ret0, _ := ret[0].(*domain.Hand)
	ret1, _ := ret[1].([]uint64)
	ret2, _ := ret[2].(domain.HalfRoundGameScores)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// FetchHandScore indicates an expected call of FetchHandScore.
func (mr *MockHandUsecaseMockRecorder) FetchHandScore(c, handID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHandScore", reflect.TypeOf((*MockHandUsecase)(nil).FetchHandScore), c, handID)
}

// FetchHands mocks base method.
func (m *MockHandUsecase) FetchHands(c context.Context) ([]*domain.Hand, map[uint64][]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHands", c)
	ret0, _ := ret[0].([]*domain.Hand)
	ret1, _ := ret[1].(map[uint64][]uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchHands indicates an expected call of FetchHands.
func (mr *MockHandUsecaseMockRecorder) FetchHands(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHands", reflect.TypeOf((*MockHandUsecase)(nil).FetchHands), c)
}
